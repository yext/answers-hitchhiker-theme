const universalVerticalsToConfig = {
  {{!-- Map the Universal config's verticalsToConfig --}}
  {{#each verticalsToConfig}}
    '{{@key}}':
      {{#with (deepMerge
        this 
        (lookup @root/componentSettings.UniversalResults.config @key)
        (lookup @root/componentSettings.UniversalResults.verticals @key)
      )}}
        Object.assign({}, {{{ json this }}}, { {{> VerticalConfig verticalKey=@key }} })
      {{/with}}
    ,
  {{/each}}
};

const pageVerticalsToConfig = {
  {{!-- Map each Page config's verticalsToConfig --}}
  {{#each verticalConfigs}}
    {{#if verticalKey}}
      '{{{verticalKey}}}': 
        {{#with (deepMerge
          (lookup verticalsToConfig verticalKey)
          (lookup @root/verticalsToConfig verticalKey)
          (lookup @root/componentSettings.UniversalResults.config verticalKey)
          (lookup @root/componentSettings.UniversalResults.verticals verticalKey)
        )}}
          Object.assign({}, {{{ json this }}}, { {{> VerticalConfig verticalKey=../verticalKey url=@key }} })
        {{/with}}
      ,
    {{/if}}
  {{/each}}
};

ANSWERS.addComponent('UniversalResults', Object.assign({},
  {{{ json componentSettings.UniversalResults }}}, 
  {
    container: '.js-answersUniversalResults',
    verticals: Object.assign({},
      {{{ json componentSettings.UniversalResults.verticals}}},
      universalVerticalsToConfig,
      pageVerticalsToConfig
    ),
  }
));

{{#*inline 'VerticalConfig'}}
  modifier: '{{{verticalKey}}}',
  {{#if url}}
    verticalPages: [
      {
        verticalKey: '{{{verticalKey}}}',
        url: '{{{url}}}'
      }
    ],
  {{/if}}
  {{#if cardType}}
    card: {
      cardType: '{{{cardType}}}'
    },
  {{/if}}
  sectionTitle: {{#if sectionTitle}}'{{{sectionTitle}}}'{{else}}{{#if label}}'{{{label}}}'{{else}}'{{{verticalKey}}}'{{/if}}{{/if}},
  {{#if icon}}
    sectionTitleIconName: '{{{icon}}}',
  {{/if}}
  {{#if iconUrl}}sectionTitleIconUrl: '{{{iconUrl}}}',{{/if}}
  viewAllText: {{#if viewAllText}}'{{{viewAllText}}}'{{else}}'View All'{{/if}},
  {{#if mapConfig}}
    includeMap: true,
    mapConfig: Object.assign({
      apiKey: HitchhikerJS.getDefaultMapApiKey('{{ mapConfig.mapProvider }}')
    },
    {{{ json mapConfig }}},
    {{!-- This theme pin config must come after mapConfig in Object.assign --}}
    {
      pin: {{> templates/universal-standard/script/map-pin mapConfig }},
    }),
  {{/if}}
  {{#if universalLimit}}
    transformData: (data) => {
      let results = data.results;
      if (results) {
        results = results.filter((rex, idx) => {
          return idx < {{{universalLimit}}};
        });
      }
      return Object.assign(data, {
        results: results
      });
    },
  {{/if}}
{{/inline}}
