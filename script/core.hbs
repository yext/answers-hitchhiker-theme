<script>
  const sdkVersion = '{{global_config.sdkVersion}}';
  if (!sdkVersion) {
    console.error('ERROR: no sdkVersion specified, please specify an sdkVersion in the global_config.');
  }
</script>
<script src="{{sdkAssetUrl global_config.sdkVersion (findFirst params.sdkLocaleOverride global_config.locale 'en') 'answerstemplates.compiled.min.js'}}" defer></script>
<script>
{{#babel}}
  function initAnswers() {
    const JAMBO_INJECTED_DATA = {{{ json env.JAMBO_INJECTED_DATA }}} || {};
    const IS_STAGING = HitchhikerJS.isStaging(JAMBO_INJECTED_DATA?.pages?.stagingDomains || []);
    const injectedConfig = {
      experienceVersion: IS_STAGING ? 'STAGING' : 'PRODUCTION',
      {{#unless global_config.useJWT}} 
        apiKey: HitchhikerJS.getInjectedProp('{{{global_config.experienceKey}}}', ['apiKey']),
      {{/unless}}
      {{#with env.JAMBO_INJECTED_DATA}}
        {{#if businessId}}businessId: "{{businessId}}",{{/if}}
      {{/with}}
    };
    const userConfig = {
      {{#with (deepMerge global_config (lookup verticalsToConfig verticalKey) pageSettings) }}
        ...{{{ json this }}},
        {{#if verticalLimit}}
          search: {
            limit: {{verticalLimit}},
            ...{{{ json search }}}
          },
        {{/if}}
      {{/with}}
    };
    const token = window.AnswersExperience.runtimeConfig?.get('token');
    ANSWERS.init({
      templateBundle: TemplateBundle.default,
      ...injectedConfig,
      ...userConfig,
      ...token && { apiKey: token },
      querySource: window.isOverlay ? 'OVERLAY' : 'STANDARD',
      onStateChange: (objParams, stringParams, replaceHistory) => {
        if ('parentIFrame' in window) {
          parentIFrame.sendMessage(JSON.stringify({
            params: iframeGetSearchParams(),
            replaceHistory: replaceHistory
          }));
        }
      },
      onReady: () => {
        window.AnswersExperience.AnswersInitializedPromise.resolve();
        
        HitchhikerJS.registerHbsHelpers();
        ANSWERS.registerHelper('close-card-svg', () => {
          return ANSWERS.renderer.SafeString({{{stringifyPartial (read 'static/assets/images/close-card') }}});
        });

        {{> @partial-block }}

        {{> script/on-ready}}

        {{#if global_config.conversionTrackingEnabled}}
          ANSWERS.setConversionsOptIn(true);
        {{/if}}
      }
    }).catch(err => {
      window.AnswersExperience.AnswersInitializedPromise.reject('Answers failed to initialized.');
    });
    {{> script/after-init}}
  }
{{/babel}}
</script>

{{> script/partials/sdk-js-script-tags
  locale=(findFirst params.sdkLocaleOverride global_config.locale 'en')
  sdkVersion=global_config.sdkVersion
}}
