<script>
  const sdkVersion = '{{global_config.sdkVersion}}';
  if (!sdkVersion) {
    console.error('ERROR: no sdkVersion specified, please specify an sdkVersion in the global_config.');
  }
</script>
<script src="{{sdkAssetUrl global_config.sdkVersion (findFirst params.sdkLocaleOverride global_config.locale 'en') 'answerstemplates.compiled.min.js' global_config.cloudRegion}}" defer></script>
<script>
{{#babel}}
  function initAnswers() {
    const JAMBO_INJECTED_DATA = {{{ json env.JAMBO_INJECTED_DATA }}} || {};
    const IS_STAGING = HitchhikerJS.isStaging(JAMBO_INJECTED_DATA?.pages?.stagingDomains || []);
    const injectedConfig = {
      experienceVersion: IS_STAGING ? 'STAGING' : 'PRODUCTION',
      {{#unless global_config.useJWT}}
        apiKey: HitchhikerJS.getInjectedProp('{{{global_config.experienceKey}}}', ['apiKey']),
      {{/unless}}
      {{#with env.JAMBO_INJECTED_DATA}}
        {{#if businessId}}businessId: "{{businessId}}",{{/if}}
      {{/with}}
      additionalHttpHeaders: {
        'Client-SDK': {
          ANSWERS_THEME: '{{{ env.packageJsonVersion }}}'
        }
      }
    };
    const userConfig = {
      {{#with (deepMerge global_config (lookup verticalsToConfig verticalKey) pageSettings) }}
        ...{{{ json this }}},
        {{#if verticalLimit}}
          search: {
            limit: {{verticalLimit}},
            ...{{{ json search }}}
          },
        {{/if}}
        {{#unless ../verticalKey}}
          search: {
            ...{{{ json (getDefaultUniversalLimit ../verticalConfigs) }}},
            ...{{{ json search }}}
          },
        {{/unless}}
      {{/with}}
    };
    const token = window.AnswersExperience.runtimeConfig?.get('token');
    const tokenHeader = window.AnswersExperience.runtimeConfig?.get('tokenHeader');
    const apiKey = window.AnswersExperience.runtimeConfig?.get('apiKey');

    const credentials = {};
    if (tokenHeader) {
      credentials.token = tokenHeader;
    } else if (apiKey) {
      credentials.apiKey = apiKey;
    } else if (token) {
      console.warn('"token" attribute is deprecated. Consider using "tokenHeader" or "apiKey" instead.');
      credentials.apiKey = token;
    }

    ANSWERS.init({
      templateBundle: TemplateBundle.default,
      ...injectedConfig,
      ...userConfig,
      ...credentials,
      querySource: window.isOverlay ? 'OVERLAY' : 'STANDARD',
      onStateChange: (objParams, stringParams, replaceHistory) => {
        if ('parentIFrame' in window) {
          parentIFrame.sendMessage(JSON.stringify({
            params: iframeGetSearchParams(),
            replaceHistory: replaceHistory
          }));
        }
      },
      ...{{> script/additional-answers-config }},
      onReady: () => {
        window.AnswersExperience.AnswersInitializedPromise.resolve();

        {{> @partial-block }}

        {{#wrapJsPartial}}
          {{> script/on-ready}}
        {{/wrapJsPartial}}

        {{#if global_config.conversionTrackingEnabled}}
          ANSWERS.setConversionsOptIn(true);
        {{/if}}

        ANSWERS.registerHelper('all', function (...args) {
          return args.filter(item => item).length === args.length;
        });

        ANSWERS.registerHelper('any', function (...args) {
          return args.filter(item => item).length > 1;
        });

        ANSWERS.registerHelper('matches', function(str, regexPattern) {
          const regex = new RegExp(regexPattern)
          return str && str.match(regex);
        });

        /**
         * Determine whether a URL is absolute or not.
         * Common examples: "mailto:slapshot@gmail.com", "//yext.com", "https://yext.com"
         */
        function isNonRelativeUrl(str) {
          const absoluteURLRegex = /^(\/|[a-zA-Z]+:)/;
          return str && str.match(absoluteURLRegex);
        }
        ANSWERS.registerHelper('isNonRelativeUrl', isNonRelativeUrl);

        ANSWERS.registerHelper('close-card-svg', () => {
          return ANSWERS.renderer.SafeString({{{stringifyPartial (read 'static/assets/images/close-card') }}});
        });

        ANSWERS.registerPartial(
          'thumbsfeedback',
          {{{stringifyPartial (read 'cards/common-partials/thumbsfeedback') }}}
        );

        /**
        * If the url is not relative, return it. If it is relative,
        * append relativePath to it.
        *
        * @param {import('handlebars').HelperOptions} options
        * @param {string} options.hash.relativePath
        * @param {string} options.hash.url
        * @returns {string}
        */
        ANSWERS.registerHelper('relativePathHandler', function relativePathHandler(options) {
          const { relativePath, url } = options.hash || {};
          if (isNonRelativeUrl(url) || !relativePath || !url) {
            return url;
          }
          return relativePath + '/' + url;
        });

        window.iframeLoaded.then(() => {
          {{#wrapJsPartial}}
            {{> script/iframe-messaging}}
          {{/wrapJsPartial}}
        });
      }
    }).catch(err => {
      console.error(err);
      window.AnswersExperience.AnswersInitializedPromise.reject('Answers failed to initialized.');
    });
    {{#wrapJsPartial}}
      {{> script/after-init}}
    {{/wrapJsPartial}}
  }
{{/babel}}
</script>

{{> script/partials/sdk-js-script-tags
  locale=(findFirst params.sdkLocaleOverride global_config.locale 'en')
  sdkVersion=global_config.sdkVersion
  cloudRegion=global_config.cloudRegion
}}
